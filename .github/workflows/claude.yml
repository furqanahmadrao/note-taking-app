name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Claude Code Router
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "LOG": true,
            "LOG_LEVEL": "info",
            "NON_INTERACTIVE_MODE": true,
            "API_TIMEOUT_MS": 600000,
            "Providers": [
              {
                "name": "gemini",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "$GEMINI_API_KEY",
                "models": ["gemini-2.5-flash"],
                "transformer": {
                  "use": ["gemini"]
                }
              }
            ],
            "Router": {
              "default": "gemini,gemini-2.5-flash"
            }
          }
          EOF
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Start Claude Code Router
        run: |
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@latest start &
          sleep 5
          curl -f http://localhost:3456/health 2>/dev/null || echo "⚠️ Health check failed"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Run Claude Code Assistant
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          anthropic_api_key: "router-managed"
          additional_permissions: |
            actions: read
            contents: write
            pull-requests: write
            issues: write
          allowed_tools: |
            # Core file operations
            Read
            Write
            Edit
            MultiEdit
            
            # Code navigation and search
            Search
            Grep
            Glob
            LS
            
            # GitHub integration
            mcp__github_comment__update_claude_comment
            
            # Git operations - comprehensive but safe
            Bash(git status)
            Bash(git diff *)
            Bash(git log *)
            Bash(git show *)
            Bash(git branch *)
            Bash(git checkout *)
            Bash(git fetch *)
            Bash(git pull *)
            Bash(git add *)
            Bash(git commit *)
            Bash(git push *)
            Bash(git reset --soft *)
            Bash(git stash *)
            Bash(git stash pop)
            Bash(gh *)
            
            # Node.js/npm operations
            Bash(npm install)
            Bash(npm ci)
            Bash(npm run *)
            Bash(npm test *)
            Bash(npm run test *)
            Bash(npm start)
            Bash(npm run build)
            Bash(npm run dev)
            Bash(npm audit)
            Bash(npm audit fix)
            Bash(npx eslint *)
            Bash(npx prettier *)
            Bash(npx tsc *)
            Bash(npx jest *)
            Bash(yarn install)
            Bash(yarn run *)
            Bash(yarn test)
            Bash(pnpm install)
            Bash(pnpm run *)
            Bash(pnpm test)
            Bash(bun install)
            Bash(bun run *)
            Bash(bun test)
            
            # Python operations (if needed)
            Bash(pip install *)
            Bash(pip freeze)
            Bash(python *)
            Bash(pytest *)
            Bash(python -m *)
            
            # Safe file system operations
            Bash(ls *)
            Bash(pwd)
            Bash(cat *)
            Bash(head *)
            Bash(tail *)
            Bash(wc *)
            Bash(find *)
            Bash(grep *)
            Bash(echo *)
            Bash(tree *)
            Bash(which *)
            Bash(whereis *)
            
            # Directory operations - safe patterns
            Bash(cd *)
            Bash(mkdir -p *)
            Bash(touch *)
            
            # Dangerous operations - only specific safe patterns
            Bash(rm -rf node_modules)
            
            Bash(rm -rf dist)
            Bash(rm -rf build)
            Bash(rm -rf .next)
            Bash(rm -rf coverage)
            Bash(rm package-lock.json)

          instructions: |
            You are Claude, an AI assistant created by Anthropic, working as a coding assistant in a GitHub Actions environment.
            
            Key Guidelines:
            1. **Identity**: Always identify yourself as Claude when interacting with users
            2. **Communication**: Provide clear, detailed explanations of changes you make
            3. **Testing**: Run tests before committing changes when applicable
            4. **Commits**: Write clear, conventional commit messages
            5. **Safety**: Never delete important files without explicit confirmation
            6. **Dependencies**: Check package.json/requirements.txt before installing new packages
            7. **Error Handling**: If a command fails, explain why and suggest alternatives
            8. **Code Quality**: Follow existing code style and conventions
            9. **Documentation**: Update relevant docs when changing functionality
            10. **Collaboration**: Ask clarifying questions when requirements are ambiguous

            For large features:
            - Break work into logical commits
            - Test incrementally
            - Document as you go
            - Consider edge cases

            For bug fixes:
            - Reproduce the issue first
            - Identify root cause
            - Fix with minimal changes
            - Add tests to prevent regression
